from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton
import telepot
from spbgtitoolsbot.settings import SCHEDULE_API, TOKEN
import requests
from datetime import date, timedelta
from copy import deepcopy
from . import scheduleapi

bot = telepot.Bot(TOKEN)
callbacks = {}


def callback(cls):
    callbacks[cls.__name__] = cls
    return cls

class InlineKeyboardCallback:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥—è—â–∏—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    keyboard = [
        [['button1', 'data1'], ['button2', 'data2']],
        [['button3', 'data3']]
    ]

    @classmethod
    def handle(cls, query, user):
        msg_id = (query['message']['chat']['id'], query['message']['message_id'])
        callback_id = query['id']
        group = user.group_number

        message = cls.dispatch(query, group)

        keyboard = cls.get_keyboard(query)

        cls.edit(msg_id, callback_id, message, keyboard)

    @classmethod
    def get_keyboard(cls, query):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ telegram-api
        –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–¥–µ–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É
        :param query:
        :return:
        """
        raise NotImplementedError()

    @classmethod
    def dispatch(cls, query, group):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
        :param query:
        :param group:
        :return:
        """
        raise NotImplementedError()

    @classmethod
    def edit(cls, msg_id, callback_id, msg, keyboard):
        try:
            bot.editMessageText(msg_id, text=msg, reply_markup=keyboard)
        except telepot.exception.TelegramError:
            bot.answerCallbackQuery(callback_id, text='–£–∂–µ –Ω–∞–∂–∞—Ç–æ ;)')
        else:
            bot.answerCallbackQuery(callback_id)

    @classmethod
    def generate_inline_keyboard(cls, keyboard):
        l = [list(map(lambda x: InlineKeyboardButton(
            text=x[0], callback_data='{}_{}'.format(cls.__name__, x[1])), i)) for i in keyboard]
        return InlineKeyboardMarkup(inline_keyboard=l)

    @classmethod
    def init_message(cls):
        raise NotImplementedError()


class BaseScheduleCallback(InlineKeyboardCallback):
    days = ('üåë –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üåò –í—Ç–æ—Ä–Ω–∏–∫', 'üåó –°—Ä–µ–¥–∞',
            'üåñ –ß–µ—Ç–≤–µ—Ä–≥', 'üåï –ü—è—Ç–Ω–∏—Ü–∞', 'üåù –°—É–±–±–æ—Ç–∞', 'üåö –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
    months = ('—è–Ω–≤–∞—Ä—è', "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
              "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è")

    @classmethod
    def generate_exercise(cls, exercise):
        return '{name} {type} {room}'.format(name=exercise['name'],
                                             type='(' + exercise['type'] + ')' if exercise['type'] else '',
                                             room=scheduleapi.get_room(exercise['room_id']))


@callback
class DayScheduleCallback(BaseScheduleCallback):
    keyboard = [[['–°–µ–≥–æ–¥–Ω—è', 0], ['–ó–∞–≤—Ç—Ä–∞', 1]]]

    @classmethod
    def get_keyboard(cls, query):
        select = int(query['data'].split('_')[1])
        keyboard = deepcopy(cls.keyboard)
        keyboard[0][select][0] = '¬∑ {} ¬∑'.format(keyboard[0][select][0])
        return cls.generate_inline_keyboard(keyboard)

    @classmethod
    def dispatch(cls, query, group):
        day = int(query['data'].split('_')[1])
        if day == 0:
            return cls.generate_message_for_day(group, date.today())
        elif day == 1:
            return cls.generate_message_for_day(group, date.today() + timedelta(days=1))
        else:
            return 'error!'

    @classmethod
    def generate_message_for_day(cls, group, day_date):
        schedule, weekday, parity = scheduleapi.get_date_schedule(group, day_date)
        schedule = [exercise for exercise in schedule if
                    exercise['day'] == str(weekday) and
                    (exercise['parity'] is None or exercise['parity'] == str(parity))]
        message = '{}, {} {} ({})\n'.format(cls.days[weekday - 1],
                                            day_date.day,
                                            cls.months[day_date.month-1],
                                            "—á–µ—Ç–Ω" if parity == 1 else '–Ω–µ—á–µ—Ç–Ω')
        for pair in range(1, 5):
            exercise = " -- "
            for ex in schedule:
                if ex['pair'] == str(pair):
                    exercise = cls.generate_exercise(ex)
            message += '{}. {}\n'.format(pair, exercise)
        return message

    @classmethod
    def init_message(cls):
        message = """–Ø —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ñ–º—è–∫–∞–π –Ω–∞ "–°–µ–≥–æ–¥–Ω—è" –∏–ª–∏ "–ó–∞–≤—Ç—Ä–∞" –∏ —è –≤—ã–¥–∞–º —Ç–µ–±–µ –∂–µ–ª–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. """
        """–£—á—Ç–∏, —á—Ç–æ —è —Ä–∞–±–æ—Ç–∞—é –ø–æ –ø–∏—Ç–µ—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤ –ø–æ–ª–Ω–æ—á—å —É –º–µ–Ω—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å ;)"""
        keyboard = cls.generate_inline_keyboard(deepcopy(cls.keyboard))
        return message, keyboard


@callback
class WeekScheduleCallback(BaseScheduleCallback):
    keyboard = [[['–ß–µ—Ç–Ω–∞—è', 0], ['–ù–µ—á–µ—Ç–Ω–∞—è', 1]]]

    @classmethod
    def get_keyboard(cls, query):
        select = int(query['data'].split('_')[1])
        keyboard = deepcopy(cls.keyboard)
        keyboard[0][select][0] = '¬∑ {} ¬∑'.format(keyboard[0][select][0])
        return cls.generate_inline_keyboard(keyboard)

    @classmethod
    def dispatch(cls, query, group):
        week = int(query['data'].split('_')[1])
        if week == 0:
            return cls.generate_message_for_week(group, parity='1')
        elif week == 1:
            return cls.generate_message_for_week(group, parity='2')
        else:
            return 'error!'

    @classmethod
    def generate_message_for_week(cls, group, parity):
        message = '–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n' if parity == '1' else '–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è\n'
        for weekday in range(1, 6):
            day_schedule = scheduleapi.get_weekday_schedule(group, weekday, parity)

            message += '\n{}\n'.format(cls.days[weekday - 1])
            for pair in range(1, 5):
                exercise = " -- "
                for ex in day_schedule:
                    if ex['pair'] == str(pair):
                        exercise = cls.generate_exercise(ex)
                message += '{}. {}\n'.format(pair, exercise)
        return message

    @classmethod
    def init_message(cls):
        message = """–Ø —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –Ω–µ–¥–µ–ª—è–º. –ñ–º—è–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—É—á–∏—à—å –ø—Ä–æ—Å—Ç—ã–Ω—é —Ç–µ–∫—Å—Ç–∞. """
        """–£—á—Ç–∏, —á—Ç–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –∂–º—è–∫–∞–π —Å–Ω–æ–≤–∞"""
        keyboard = cls.generate_inline_keyboard(deepcopy(cls.keyboard))
        return message, keyboard


@callback
class AllScheduleCallback(BaseScheduleCallback):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –∫ –¥–∞–Ω–Ω—ã–º –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –ø–æ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
    –ö –ø—Ä–∏–º–µ—Ä—É –µ—Å–ª–∏ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è –∏ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–Ω–µ—á–µ—Ç–Ω–∞—è", —Ç–æ –ø—Ä–∏–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∞—è data:
    AllScheduleCallback_1_0_2 (1 - –Ω–∞–∂–∞—Ç–∏–µ, 0 –∏ 2 - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–±–æ—Ä)
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–æ—Ä –Ω–∞ —á–µ—Ç–Ω–∞—è-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.
    """
    keyboard = [
        [['–ß–µ—Ç–Ω–∞—è', 0], ['–ù–µ—á–µ—Ç–Ω–∞—è', 1]],
        [['–ü–æ–Ω', 2], ['–í—Ç', 3], ['–°—Ä', 4], ['–ß–µ—Ç', 5], ['–ü—è—Ç', 6]]
    ]

    @classmethod
    def dispatch(cls, query, group):
        button, first_row, second_row,  = map(int, query['data'].split('_')[1:])
        if 0 <= button <= 1:  # –≤—ã–±–æ—Ä —á–µ—Ç–Ω–æ—Å—Ç–∏
            parity = button + 1
            weekday = second_row - 1
        else:  # –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            parity = first_row + 1
            weekday = button - 1
        return cls.generate_message(group, parity, weekday)

    @classmethod
    def generate_message(cls, group, parity, weekday):
        schedule = scheduleapi.get_weekday_schedule(group, weekday, parity)
        message = '{}, ({})\n'.format(cls.days[weekday - 1],
                                      "—á–µ—Ç–Ω" if parity == 1 else '–Ω–µ—á–µ—Ç–Ω')
        for pair in range(1, 5):
            exercise = " -- "
            for ex in schedule:
                if ex['pair'] == str(pair):
                    exercise = cls.generate_exercise(ex)
            message += '{}. {}\n'.format(pair, exercise)
        return message

    @classmethod
    def get_keyboard(cls, query):
        keyboard = deepcopy(cls.keyboard)
        button, first_row, second_row,  = map(int, query['data'].split('_')[1:])

        if 0 <= button <= 1:  # –≤—ã–±–æ—Ä —á–µ—Ç–Ω–æ—Å—Ç–∏
            parity = button
            weekday = second_row - 2
        else:  # –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            parity = first_row
            weekday = button - 2

        keyboard[0][parity][0] = '¬∑ {} ¬∑'.format(keyboard[0][parity][0])
        keyboard[1][weekday][0] = '¬∑ {} ¬∑'.format(keyboard[1][weekday][0])

        for row in keyboard:
            for button in row:
                button[1] = '{}_{}_{}'.format(button[1], parity, weekday+2)

        return cls.generate_inline_keyboard(keyboard)

    @classmethod
    def init_message(cls):
        message = """–Ø —Å–æ–æ–±—â–µ–Ω–∏–µ-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º. –ñ–º—è–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–ª—É—á–∏—à—å —á–µ—Ç–∫–æ—Å—Ç—å –∏ —è—Å–Ω–æ—Å—Ç—å"""
        """–£—á—Ç–∏, —á—Ç–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö - –∂–º—è–∫–∞–π —Å–Ω–æ–≤–∞"""
        keyboard = deepcopy(cls.keyboard)
        for row in keyboard:
            for button in row:
                button[1] = '{}_{}_{}'.format(button[1], 0, 2)
        return message, cls.generate_inline_keyboard(keyboard)
